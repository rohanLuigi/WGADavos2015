# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
#Genomic Prediction in Livestock Short Course 
#Department of Animal Science,Iowa State University
#May 11-15, 2015


using Distributions
function simDat(nObs,nLoci,bMean,bStd,resStd)
X=[ones(nObs,1) sample([0,1,2],(nObs,nLoci))]
b=rand(Normal(bMean,bStd),size(X,2))
y=X*b+rand(Normal(0.0,resStd),nObs)
return(y,X,b)
end

nObs =100
nLoci =5
bMean =0.0
bStd =0.5
resStd =1.0
res=simDat(nObs,nLoci,bMean,bStd,resStd)
resVar=resStd^2
y=res[1]
X=res[2]
b=res[3]

# Form the least-squares coefficient matrix
XpX=X'X
# Form the right-hand side
Xpy=X'y
# Compute the inverse coefficient matrix
invXpX=inv(XpX)
betahat=invXpX*Xpy
# Remember to transpose so k is a column vector
k=X[12,:]'   # this is equivalent to k[:]=X[12,:]
# Get the predicted value
pred=k'betahat
# Get the prediction error variance (remember to multiply by sigma-squared e)
k'invXpX*k*resVar

# Sample from the bivariate normal
mu=[0.0;0.0]
V=[1.0 0.3
   0.3 1.0]
d=MvNormal(mu,V)
XY=rand(d,10000)'

# Choose top 5% on variable 1 only
mean(sort(XY[:,1],rev=true)[1:500])

# Find the individuals within 1 sd of variable 2
goodtype=(XY[:,2].>-1) & (XY[:,2].<1.);
# then find the top 500 on variable 1 that meet variable 2 condition
mean(sort(XY[goodtype,1],rev=true)[1:500])









